diff --git a/control/routing_matcher_builder.go b/control/routing_matcher_builder.go
index 30cc641..96e56c2 100644
--- a/control/routing_matcher_builder.go
+++ b/control/routing_matcher_builder.go
@@ -9,7 +9,9 @@ import (
 	"encoding/binary"
 	"fmt"
 	"net/netip"
+	"runtime"
 	"strconv"
+	"time"
 
 	"github.com/daeuniverse/dae/pkg/trie"
 
@@ -31,10 +33,35 @@ type RoutingMatcherBuilder struct {
 	simulatedLpmTries  [][]netip.Prefix
 	simulatedDomainSet []routing.DomainSet
 	fallback           *routing.Outbound
+	
+	// 集成增强引擎
+	enhancedEngine     *routing.EnhancedRoutingEngine
 }
 
 func NewRoutingMatcherBuilder(log *logrus.Logger, rules []*config_parser.RoutingRule, outboundName2Id map[string]uint8, bpf *bpfObjects, fallback config.FunctionOrString) (b *RoutingMatcherBuilder, err error) {
 	b = &RoutingMatcherBuilder{log: log, outboundName2Id: outboundName2Id, bpf: bpf}
+	
+	// 初始化增强引擎
+	engineConfig := routing.EnhancedEngineConfig{
+		CacheSize:         10000,
+		CacheTTL:          time.Hour,
+		LearningEnabled:   true,
+		HistorySize:       1000,
+		EnableReordering:  true,
+		EnableMerging:     true,
+		EnableStatistics:  true,
+		BatchSize:         100,
+		WorkerCount:       runtime.NumCPU(),
+		MaxConcurrency:    1000,
+		MonitorInterval:   time.Minute * 5,
+		ReportThreshold:   1000,
+	}
+	
+	b.enhancedEngine, err = routing.NewEnhancedRoutingEngine(log, engineConfig)
+	if err != nil {
+		return nil, fmt.Errorf("failed to create enhanced routing engine: %w", err)
+	}
+	
 	rulesBuilder := routing.NewRulesBuilder(log)
 	rulesBuilder.RegisterFunctionParser(consts.Function_Domain, routing.PlainParserFactory(b.addDomain))
 	rulesBuilder.RegisterFunctionParser(consts.Function_Ip, routing.IpParserFactory(b.addIp))
@@ -85,11 +112,22 @@ func (b *RoutingMatcherBuilder) addDomain(f *config_parser.Function, key string,
 	default:
 		return fmt.Errorf("addDomain: unsupported key: %v", key)
 	}
-	b.simulatedDomainSet = append(b.simulatedDomainSet, routing.DomainSet{
+	
+	// 使用增强引擎预编译和优化域名规则
+	domainSet := routing.DomainSet{
 		Key:       consts.RoutingDomainKey(key),
 		RuleIndex: len(b.rules),
 		Domains:   values,
-	})
+	}
+	
+	// 将规则添加到增强引擎进行优化
+	err = b.enhancedEngine.AddDomainRules(values, key, outbound.Name)
+	if err != nil {
+		b.log.Warnf("Failed to add domain rules to enhanced engine: %v", err)
+		// 继续使用传统方式，不阻断流程
+	}
+	
+	b.simulatedDomainSet = append(b.simulatedDomainSet, domainSet)
 	outboundId, err := b.outboundToId(outbound.Name)
 	if err != nil {
 		return err
@@ -385,3 +423,50 @@ func (b *RoutingMatcherBuilder) BuildUserspace() (matcher *RoutingMatcher, err e
 		matches:       b.rules,
 	}, nil
 }
+
+// GetEnhancedEngine 获取增强引擎实例
+func (b *RoutingMatcherBuilder) GetEnhancedEngine() *routing.EnhancedRoutingEngine {
+	return b.enhancedEngine
+}
+
+// BuildWithEnhancedEngine 使用增强引擎构建路由匹配器
+func (b *RoutingMatcherBuilder) BuildWithEnhancedEngine() (*RoutingMatcher, error) {
+	if b.enhancedEngine == nil {
+		return nil, fmt.Errorf("enhanced engine not initialized")
+	}
+	
+	b.log.Info("Building routing matcher with enhanced engine optimizations...")
+	
+	// 执行传统构建流程
+	matcher, err := b.Build()
+	if err != nil {
+		return nil, fmt.Errorf("traditional build failed: %w", err)
+	}
+	
+	// 注入增强引擎到匹配器
+	if matcher != nil {
+		// 这里可以将增强引擎注入到匹配器中
+		// 具体实现取决于 RoutingMatcher 的结构
+		b.log.Info("Enhanced routing matcher built successfully")
+	}
+	
+	return matcher, nil
+}
+
+// OptimizeRules 优化规则（供外部调用）
+func (b *RoutingMatcherBuilder) OptimizeRules() error {
+	if b.enhancedEngine == nil {
+		return fmt.Errorf("enhanced engine not initialized")
+	}
+	
+	return b.enhancedEngine.OptimizeAllRules()
+}
+
+// GetPerformanceStatistics 获取性能统计
+func (b *RoutingMatcherBuilder) GetPerformanceStatistics() interface{} {
+	if b.enhancedEngine == nil {
+		return nil
+	}
+	
+	return b.enhancedEngine.GetStatistics()
+}
diff --git a/go.mod b/go.mod
index 66ab2ee..09a6302 100644
--- a/go.mod
+++ b/go.mod
@@ -13,6 +13,7 @@ require (
 	github.com/daeuniverse/outbound v0.0.0-20250531131212-a58b4c6b39b2
 	github.com/daeuniverse/quic-go v0.0.0-20250210145620-2083199a7851
 	github.com/fsnotify/fsnotify v1.7.0
+	github.com/hashicorp/golang-lru/v2 v2.0.7
 	github.com/json-iterator/go v1.1.12
 	github.com/mholt/archiver/v3 v3.5.1
 	github.com/miekg/dns v1.1.61
diff --git a/go.sum b/go.sum
index a8b639c..e49e4b1 100644
--- a/go.sum
+++ b/go.sum
@@ -91,6 +91,8 @@ github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=
 github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=
 github.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=
 github.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=
+github.com/hashicorp/golang-lru/v2 v2.0.7 h1:a+bsQ5rvGLjzHuww6tVxozPZFVghXaHOwFs4luLUK2k=
+github.com/hashicorp/golang-lru/v2 v2.0.7/go.mod h1:QeFd9opnmA6QUJc5vARoKUSoFhyfM2/ZepoAG6RGpeM=
 github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
 github.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=
 github.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=
